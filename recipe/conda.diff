diff --git a/CMakeLists.txt b/CMakeLists.txt
index 24ffd1225a..4605834a0f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -19,6 +19,17 @@ endif()
 
 project(CATBOOST LANGUAGES C CXX ASM)
 
+# Use OpenSSL from system instead of the version provided by conan.
+#  1. conan supplied FindOpenSSL.cmake provides OpenSSL::OpenSSL
+#  2. cmake supplied FindOpenSSL.cmake provides OpenSSL::SSL and OpenSSL::Crypto.
+# See https://github.com/conan-io/conan-center-index/issues/952
+# This patch is needed to reconcile the difference.
+find_package(OpenSSL REQUIRED)
+include_directories(${OPENSSL_INCLUDE_DIR})
+add_library(LinkOpenSSL INTERFACE)
+target_link_libraries(LinkOpenSSL INTERFACE OpenSSL::SSL OpenSSL::Crypto)
+add_library(OpenSSL::OpenSSL ALIAS LinkOpenSSL)
+
 set(BUILD_SHARED_LIBS Off)
 set(CMAKE_CXX_STANDARD 20)
 set(CMAKE_CXX_EXTENSIONS Off)
@@ -39,7 +50,6 @@ include(cmake/global_flags.cmake)
 include(cmake/global_vars.cmake)
 include(cmake/archive.cmake)
 include(cmake/common.cmake)
-include(cmake/conan1_deprecated.cmake)
 include(cmake/cuda.cmake)
 include(cmake/cython.cmake)
 include(cmake/fbs.cmake)
@@ -48,21 +58,6 @@ include(cmake/recursive_library.cmake)
 include(cmake/shared_libs.cmake)
 include(cmake/swig.cmake)
 
-if (CMAKE_CROSSCOMPILING)
-  include(${PROJECT_BINARY_DIR}/conan_paths.cmake)
-else()
-  conan_cmake_autodetect(settings)
-  conan_cmake_install(
-    PATH_OR_REFERENCE ${PROJECT_SOURCE_DIR}
-    INSTALL_FOLDER ${PROJECT_BINARY_DIR}
-    BUILD missing
-    REMOTE conancenter
-    SETTINGS ${settings}
-    ENV "CONAN_CMAKE_GENERATOR=${CMAKE_GENERATOR}"
-    CONF "tools.cmake.cmaketoolchain:generator=${CMAKE_GENERATOR}"
-  )
-endif()
-
diff --git a/build/toolchains/clang.toolchain b/build/toolchains/clang.toolchain
index 7cb81ff061..e11ae974d0 100644
--- a/build/toolchains/clang.toolchain
+++ b/build/toolchains/clang.toolchain
@@ -1,11 +1,7 @@
-set(CMAKE_C_COMPILER clang)
-set(CMAKE_CXX_COMPILER clang++)
-
 set(CMAKE_C_STANDARD_LIBRARIES "-lc -lm")
 set(CMAKE_CXX_STANDARD_LIBRARIES "-lc -lm")
 
 set(CMAKE_CUDA_COMPILER nvcc)
-set(CMAKE_CUDA_HOST_COMPILER clang-14)
 
 set(CMAKE_CUDA_FLAGS_INIT "--allow-unsupported-compiler")
 
@@ -14,9 +10,6 @@ if (NOT APPLE)
   set(CMAKE_SHARED_LINKER_FLAGS -fuse-ld=lld)
 endif()
 
-set(ENV{CC} clang)
-set(ENV{CXX} clang++)
-
 set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
 set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
 set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
